import re
import json
import logging
from typing import Dict, Optional, Tuple, List, Any
from openai import OpenAI
from config import Config
from web_search_service import CompetitiveOffersSearchService
from integration_donnees_reelles import RealDataProvider

logger = logging.getLogger(__name__)


class EnhancedInvoiceAnalyzer:
    def __init__(self):
        if not Config.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY n'est pas configur√©")

        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.web_search = CompetitiveOffersSearchService()
        self.data_provider = RealDataProvider()

        # Mapping d√©taill√© des types de factures
        self.invoice_patterns = {
            'electricite': {
                'keywords': ['kwh', '√©lectricit√©', 'edf', 'engie', 'totalenergies', 'ohm',
                             'ekwateur', 'vattenfall', 'tarif bleu', 'heures creuses',
                             'heures pleines', 'consommation √©lectrique', 'compteur √©lectrique'],
                'negative': ['gaz naturel', 'mobile', 'internet', 'fibre'],
                'providers': ['EDF', 'Engie', 'TotalEnergies', 'OHM', 'ekWateur', 'Vattenfall',
                              'Plan√®te OUI', 'Mint √ânergie', 'Alpiq', 'Iberdrola']
            },
            'gaz': {
                'keywords': ['gaz naturel', 'm3', 'm√®tres cubes', 'thermes', 'pcs',
                             'consommation gaz', 'chaudi√®re', 'chauffage gaz'],
                'negative': ['√©lectricit√©', 'kwh √©lectrique'],
                'providers': ['Engie', 'TotalEnergies', 'ENI', 'ekWateur', 'Vattenfall']
            },
            'internet': {
                'keywords': ['internet', 'fibre', 'adsl', 'livebox', 'freebox', 'bbox',
                             'sfr box', 'd√©bit', 'mbps', 'wifi', 'routeur', 'modem',
                             'ligne fixe', 't√©l√©phone illimit√©'],
                'negative': ['consommation kwh', 'compteur'],
                'providers': ['Orange', 'Free', 'SFR', 'Bouygues', 'RED', 'Sosh']
            },
            'mobile': {
                'keywords': ['mobile', 'forfait', 'go', 'donn√©es mobiles', '4g', '5g',
                             'sms', 'mms', 'roaming', 'carte sim', 'smartphone'],
                'negative': ['fibre', 'box internet'],
                'providers': ['Orange', 'Free', 'SFR', 'Bouygues', 'RED', 'Sosh', 'B&You']
            },
            'internet_mobile': {
                'keywords': ['open', 'pack', 'offre group√©e', 'convergente', 'quadruple play',
                             'internet + mobile', 'fibre + mobile', 'box + mobile'],
                'negative': [],
                'providers': ['Orange', 'Free', 'SFR', 'Bouygues']
            },
            'assurance_auto': {
                'keywords': ['assurance auto', 'v√©hicule', 'sinistre', 'franchise',
                             'responsabilit√© civile', 'tous risques', 'tiers', 'bonus malus',
                             'immatriculation', 'carte verte'],
                'negative': ['habitation', 'sant√©'],
                'providers': ['AXA', 'Allianz', 'MAIF', 'MACIF', 'Matmut', 'MMA', 'Direct Assurance']
            },
            'assurance_habitation': {
                'keywords': ['assurance habitation', 'multirisque habitation', 'mrh',
                             'logement', 'incendie', 'd√©g√¢t des eaux', 'vol', 'responsabilit√© locative'],
                'negative': ['v√©hicule', 'auto'],
                'providers': ['AXA', 'Allianz', 'MAIF', 'MACIF', 'Matmut', 'MMA']
            }
        }

    def _get_generic_extraction_prompt(self) -> str:
        """
        Retourne un prompt g√©n√©rique pour l'extraction de donn√©es de base
        quand le type de facture est inconnu.
        """
        logger.info("Utilisation du prompt d'extraction g√©n√©rique pour un type de facture inconnu.")
        return """
        Tu es un assistant intelligent d'extraction de donn√©es. Le type de document suivant est inconnu.
        Analyse le texte et extrais les informations les plus pertinentes que tu peux trouver, comme :
        - Le nom du fournisseur
        - Le montant total
        - La date du document
        - Un num√©ro de client ou de contrat

        Retourne ces informations dans un format JSON simple. Si une information n'est pas trouv√©e, indique "non trouv√©".
        """

    def analyze_invoice(self, extracted_text: str) -> Dict[str, Any]:
        """Analyse compl√®te avec d√©tection intelligente et recherche web"""
        try:
            # 1. D√âTECTION AVANC√âE DU TYPE
            invoice_type, confidence = self._advanced_type_detection(extracted_text)
            logger.info(f"üéØ Type d√©tect√©: {invoice_type} (confiance: {confidence}%)")

            # 2. EXTRACTION STRUCTUR√âE PAR TYPE
            structured_data = self._extract_structured_data(extracted_text, invoice_type)

            # 3. RECHERCHE WEB DES OFFRES CONCURRENTES
            competitive_offers = self._search_competitive_offers(invoice_type, structured_data)

            # 4. ANALYSE DES PI√àGES ET OPTIMISATIONS
            issues = self._detect_issues(structured_data, invoice_type)

            # 5. CALCUL DES √âCONOMIES
            best_savings = self._calculate_best_savings(structured_data, competitive_offers)

            # 6. COMPILATION DU R√âSULTAT FINAL
            result = {
                'type_facture': invoice_type,
                'confidence': confidence,
                'client_info': structured_data.get('client_info', {}),
                'current_offer': structured_data.get('current_offer', {}),
                'alternatives': competitive_offers[:5],  # Top 5
                'detected_issues': issues,
                'best_savings': best_savings,
                'methodology': self._get_methodology(invoice_type),
                'structured_data': structured_data
            }

            return {
                'structured_data': result,
                'raw_response': json.dumps(result, ensure_ascii=False, indent=2)
            }

        except Exception as e:
            logger.error(f"Erreur analyse: {str(e)}")
            raise

    def _advanced_type_detection(self, text: str) -> Tuple[str, int]:
        """D√©tection avanc√©e du type de facture avec score de confiance"""
        text_lower = text.lower()
        scores = {}

        for invoice_type, patterns in self.invoice_patterns.items():
            score = 0

            # Points positifs pour mots-cl√©s trouv√©s
            for keyword in patterns['keywords']:
                if keyword in text_lower:
                    score += 10

            # Points bonus pour fournisseurs identifi√©s
            for provider in patterns['providers']:
                if provider.lower() in text_lower:
                    score += 20

            # Points n√©gatifs pour exclusions
            for negative in patterns['negative']:
                if negative in text_lower:
                    score -= 15

            scores[invoice_type] = max(0, score)

        # D√©tection sp√©ciale pour factures combin√©es
        if scores.get('internet', 0) > 30 and scores.get('mobile', 0) > 30:
            return 'internet_mobile', 95

        # Retourner le type avec le score le plus √©lev√©
        if scores:
            best_type = max(scores, key=scores.get)
            confidence = min(100, scores[best_type])

            # Si confiance trop faible, utiliser l'analyse GPT
            if confidence < 40:
                return self._gpt_type_detection(text)

            return best_type, confidence

        return 'inconnu', 0

    def _gpt_type_detection(self, text: str) -> Tuple[str, int]:
        """D√©tection par GPT en cas d'incertitude"""
        prompt = """Analyse ce texte de facture et d√©termine son type EXACT.

Types possibles (CHOISIR UN SEUL):
- electricite
- gaz
- internet
- mobile
- internet_mobile
- assurance_auto
- assurance_habitation
- autre

R√©ponds UNIQUEMENT avec le type, rien d'autre."""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": text[:1000]}
                ],
                max_tokens=10,
                temperature=0
            )

            detected_type = response.choices[0].message.content.strip().lower()

            if detected_type in self.invoice_patterns:
                return detected_type, 80

        except Exception as e:
            logger.error(f"Erreur GPT detection: {e}")

        return 'inconnu', 0

    def _extract_structured_data(self, text: str, invoice_type: str) -> Dict:
        """Extraction structur√©e adapt√©e au type de facture"""

        # Prompt sp√©cialis√© selon le type
        prompt = self._get_specialized_extraction_prompt(invoice_type)

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": f"Texte de la facture:\n{text}"}
                ],
                max_tokens=1500,
                temperature=0.1
            )

            result = response.choices[0].message.content

            # Parser le JSON
            json_match = re.search(r'\{.*\}', result, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())

        except Exception as e:
            logger.error(f"Erreur extraction: {e}")

        return self._get_fallback_structure(invoice_type)

    def _get_specialized_extraction_prompt(self, invoice_type: str) -> str:
        """Retourne le prompt sp√©cialis√© selon le type"""

        if invoice_type == 'internet_mobile':
            return """Tu es expert en factures t√©l√©coms fran√ßaises. Extrais PR√âCIS√âMENT:

{
  "client_info": {
    "nom": "Nom complet",
    "adresse": "Adresse compl√®te",
    "numero_client": "N¬∞ client",
    "reference_pto": "R√©f√©rence fibre si pr√©sente"
  },
  "current_offer": {
    "fournisseur": "Orange|SFR|Free|Bouygues",
    "offre_nom": "Nom exact de l'offre (ex: Open Max 200 Go)",
    "prix_mensuel": "Prix mensuel TTC en euros",
    "montant_total_annuel": "Montant annuel calcul√©",
    "services_inclus": {
      "internet": "Type et d√©bit",
      "mobile": "Forfait data",
      "tv": "Oui/Non et d√©tails",
      "telephone_fixe": "Oui/Non"
    },
    "engagement": "Date fin engagement"
  },
  "consommation": {
    "data_mobile": "Go consomm√©s",
    "appels": "Dur√©e/nombre",
    "sms": "Nombre"
  },
  "facturation": {
    "periode": "P√©riode factur√©e",
    "montant_ttc": "Montant de cette facture"
  }
}"""

        elif invoice_type == 'electricite':
            return """Tu es expert en factures d'√©lectricit√© fran√ßaises. Extrais PR√âCIS√âMENT:

{
  "client_info": {
    "nom": "Nom complet",
    "adresse": "Adresse",
    "numero_pdl": "Point de livraison",
    "numero_contrat": "N¬∞ contrat"
  },
  "current_offer": {
    "fournisseur": "Nom du fournisseur",
    "offre_nom": "Nom de l'offre",
    "puissance_souscrite": "kVA",
    "option_tarifaire": "Base/HP-HC",
    "consommation_annuelle": "kWh/an",
    "montant_total_annuel": "‚Ç¨ TTC/an",
    "prix_kwh": "‚Ç¨/kWh TTC",
    "abonnement_annuel": "‚Ç¨ TTC/an"
  },
  "consommation": {
    "periode": "Dates",
    "kwh_consommes": "Total kWh",
    "index_releve": "Index compteur"
  }
}"""

        elif invoice_type == 'gaz':
            return """Tu es expert en factures de gaz fran√ßaises. Extrais:

{
  "client_info": {
    "nom": "Nom",
    "adresse": "Adresse",
    "numero_pce": "Point comptage",
    "numero_contrat": "Contrat"
  },
  "current_offer": {
    "fournisseur": "Fournisseur",
    "offre_nom": "Offre",
    "classe_consommation": "B0/B1/B2I",
    "consommation_annuelle": "kWh/an",
    "montant_total_annuel": "‚Ç¨ TTC/an",
    "prix_kwh": "‚Ç¨/kWh TTC",
    "abonnement_annuel": "‚Ç¨ TTC/an"
  }
}"""

        # Autres types...
        return self._get_generic_extraction_prompt()

    def _search_competitive_offers(self, invoice_type: str, structured_data: Dict) -> List[Dict]:
        """Recherche les offres concurrentes via web search et donn√©es r√©elles"""

        competitive_offers = []

        # 1. Donn√©es r√©elles du provider
        if invoice_type == 'electricite':
            consumption = self._extract_consumption_value(
                structured_data.get('current_offer', {}).get('consommation_annuelle', '5000')
            )
            real_offers = self.data_provider.get_real_electricity_offers(consumption)
            competitive_offers.extend(real_offers)

        elif invoice_type == 'gaz':
            consumption = self._extract_consumption_value(
                structured_data.get('current_offer', {}).get('consommation_annuelle', '10000')
            )
            real_offers = self.data_provider.get_real_gas_offers(consumption)
            competitive_offers.extend(real_offers)

        elif invoice_type in ['internet', 'mobile', 'internet_mobile']:
            current_price = self._extract_price_value(
                structured_data.get('current_offer', {}).get('prix_mensuel', '50')
            )
            real_offers = self.data_provider.get_real_internet_offers(current_price)
            competitive_offers.extend(real_offers)

        # 2. Web search pour offres suppl√©mentaires
        if invoice_type in ['electricite', 'gaz']:
            search_type = 'energie'
        elif invoice_type in ['internet', 'mobile', 'internet_mobile']:
            search_type = 'telecom'
        else:
            search_type = invoice_type

        web_offers = self.web_search.search_competitive_offers(
            search_type,
            structured_data.get('current_offer', {}),
            structured_data.get('consommation', {})
        )

        # 3. Fusion et d√©duplication
        all_offers = self._merge_and_deduplicate_offers(competitive_offers + web_offers)

        # 4. Classement par √©conomies potentielles
        return self._rank_offers_by_savings(all_offers, structured_data)

    def _detect_issues(self, structured_data: Dict, invoice_type: str) -> List[str]:
        """D√©tecte les pi√®ges et probl√®mes selon les instructions utilisateur"""

        issues = []
        current_offer = structured_data.get('current_offer', {})

        # Instructions de l'utilisateur pour d√©tecter les pi√®ges
        if invoice_type == 'electricite':
            # V√©rifier la puissance souscrite
            puissance = current_offer.get('puissance_souscrite', '')
            if puissance:
                try:
                    kva = float(re.search(r'(\d+)', puissance).group(1))
                    if kva > 6:
                        issues.append(f"Puissance souscrite √©lev√©e ({kva} kVA) - v√©rifier si n√©cessaire")
                except:
                    pass

            # V√©rifier option tarifaire
            if 'HP-HC' in str(current_offer.get('option_tarifaire', '')):
                issues.append("Option Heures Pleines/Creuses - rentable seulement si >30% consommation en HC")

            # Prix √©lev√©
            prix_kwh = self._extract_price_value(current_offer.get('prix_kwh', '0'))
            if prix_kwh > 0.25:
                issues.append(f"Prix du kWh √©lev√© ({prix_kwh}‚Ç¨) - potentiel d'√©conomies important")

        elif invoice_type in ['internet', 'internet_mobile']:
            # Engagement
            engagement = current_offer.get('engagement', '')
            if engagement and '2026' in engagement:
                issues.append("Engagement longue dur√©e limitant la flexibilit√©")

            # Services non utilis√©s
            services = current_offer.get('services_inclus', {})
            if services.get('tv') and 'premium' in str(services.get('tv', '')).lower():
                issues.append("Services TV premium inclus - v√©rifier l'utilisation r√©elle")

            # Prix apr√®s promotion
            prix = current_offer.get('prix_mensuel', '')
            if 'promo' in str(prix).lower() or 'premi√®re ann√©e' in str(prix).lower():
                issues.append("Tarif promotionnel temporaire - pr√©voir augmentation")

        # Limite √† 4 issues comme demand√©
        return issues[:4]

    def _calculate_best_savings(self, structured_data: Dict, competitive_offers: List[Dict]) -> Dict:
        """Calcule les √©conomies selon les instructions utilisateur"""

        current_offer = structured_data.get('current_offer', {})
        best_saving = {
            'fournisseur_recommande': '',
            'economie_annuelle': 0,
            'pourcentage_economie': 0,
            'action_recommandee': ''
        }

        # Extraire le co√ªt actuel
        current_cost = self._extract_annual_cost(current_offer)

        if not current_cost or not competitive_offers:
            return {
                'fournisseur_recommande': 'Analyse approfondie recommand√©e',
                'economie_annuelle': '√Ä d√©terminer',
                'pourcentage_economie': 'Variable',
                'action_recommandee': 'Comparer les offres d√©taill√©es'
            }

        # Calculer √©conomies pour chaque offre
        max_saving = 0
        best_offer = None

        for offer in competitive_offers:
            offer_cost = self._extract_annual_cost(offer)
            if offer_cost and offer_cost < current_cost:
                saving = current_cost - offer_cost
                if saving > max_saving:
                    max_saving = saving
                    best_offer = offer

        if best_offer:
            percentage = (max_saving / current_cost) * 100
            best_saving = {
                'fournisseur_recommande': best_offer.get('fournisseur', ''),
                'economie_annuelle': f"{max_saving:.2f}‚Ç¨",
                'pourcentage_economie': f"{percentage:.1f}%",
                'action_recommandee': f"Changer pour {best_offer.get('fournisseur', '')} - {best_offer.get('offre', '')}"
            }

        return best_saving

    def _extract_consumption_value(self, text: str) -> int:
        """Extrait une valeur de consommation"""
        try:
            match = re.search(r'(\d+)', str(text).replace(' ', ''))
            return int(match.group(1)) if match else 5000
        except:
            return 5000

    def _extract_price_value(self, text: str) -> float:
        """Extrait une valeur de prix"""
        try:
            cleaned = re.sub(r'[^\d,.]', '', str(text))
            cleaned = cleaned.replace(',', '.')
            return float(cleaned)
        except:
            return 0.0

    def _extract_annual_cost(self, offer: Dict) -> float:
        """Extrait ou calcule le co√ªt annuel"""
        # Essayer le total annuel direct
        total = offer.get('montant_total_annuel') or offer.get('total_annuel', '')
        if total:
            cost = self._extract_price_value(total)
            if cost > 0:
                return cost

        # Calculer depuis mensuel
        monthly = offer.get('prix_mensuel', '')
        if monthly:
            monthly_cost = self._extract_price_value(monthly)
            if monthly_cost > 0:
                return monthly_cost * 12

        # Calculer depuis kWh + abonnement
        prix_kwh = self._extract_price_value(offer.get('prix_kwh', '0'))
        abonnement = self._extract_price_value(offer.get('abonnement_annuel', '0'))
        consommation = self._extract_consumption_value(offer.get('consommation_annuelle', '0'))

        if prix_kwh > 0 and consommation > 0:
            return (prix_kwh * consommation) + abonnement

        return 0

    def _merge_and_deduplicate_offers(self, offers: List[Dict]) -> List[Dict]:
        """Fusionne et d√©duplique les offres"""
        unique_offers = {}

        for offer in offers:
            key = f"{offer.get('fournisseur', '')}-{offer.get('offre', '')}"
            if key not in unique_offers:
                unique_offers[key] = offer

        return list(unique_offers.values())

    def _rank_offers_by_savings(self, offers: List[Dict], structured_data: Dict) -> List[Dict]:
        """Classe les offres par √©conomies potentielles"""
        current_cost = self._extract_annual_cost(structured_data.get('current_offer', {}))

        for offer in offers:
            offer_cost = self._extract_annual_cost(offer)
            if current_cost and offer_cost:
                offer['savings_potential'] = current_cost - offer_cost
            else:
                offer['savings_potential'] = 0

        # Trier par √©conomies d√©croissantes
        offers.sort(key=lambda x: x.get('savings_potential', 0), reverse=True)

        return offers

    def _get_methodology(self, invoice_type: str) -> str:
        """Retourne la m√©thodologie adapt√©e"""
        methodologies = {
            'electricite': "Comparaison bas√©e sur les tarifs r√©glement√©s CRE et offres de march√© janvier 2025",
            'gaz': "Analyse selon les tarifs de r√©f√©rence gaz et offres concurrentes 2025",
            'internet_mobile': "Comparaison des offres convergentes triple/quadruple play du march√© fran√ßais",
            'assurance_auto': "Analyse bas√©e sur les tarifs moyens du march√© assurance auto 2025"
        }
        return methodologies.get(invoice_type, "Analyse comparative du march√© fran√ßais actuel")

    def _get_fallback_structure(self, invoice_type: str) -> Dict:
        """Structure de fallback en cas d'erreur"""
        return {
            'type_facture': invoice_type,
            'client_info': {'nom': '√Ä extraire'},
            'current_offer': {'fournisseur': '√Ä identifier'},
            'alternatives': [],
            'detected_issues': ['Analyse manuelle requise'],
            'best_savings': {'economie_annuelle': '√Ä calculer'}
        }

    def calculate_savings(self, structured_data: Dict) -> Optional[float]:
        """Calcul des √©conomies pour compatibilit√©"""
        best_savings = structured_data.get('best_savings', {})
        economie = best_savings.get('economie_annuelle', '')

        if economie and isinstance(economie, str):
            try:
                return float(re.search(r'(\d+[.]?\d*)', economie).group(1))
            except:
                pass

        return None