import os
import logging
import tempfile
from typing import Optional
import uuid
from pathlib import Path

from fastapi import FastAPI, HTTPException, Depends, UploadFile, File, Form
from fastapi.responses import JSONResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from pydantic import BaseModel, EmailStr

from config import Config
from database import get_db, create_tables, User, Invoice
from ocr_processor import OCRProcessor
from ai_analyzer import EnhancedInvoiceAnalyzer
from pdf_generator import FixedPDFGenerator

# Setup logging d√©taill√©
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="Analyseur de Factures API - Version Corrig√©e",
    description="API corrig√©e pour l'analyse de factures avec formatage PDF professionnel",
    version="2.1.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize corrected components
Config.create_folders()
ocr_processor = OCRProcessor()
ai_analyzer = EnhancedInvoiceAnalyzer()
pdf_generator = FixedPDFGenerator()


# Pydantic models
class UserCreate(BaseModel):
    first_name: str
    last_name: str
    email: EmailStr
    phone: str
    accept_callback: bool = True


class UserResponse(BaseModel):
    id: int
    first_name: str
    last_name: str
    email: str
    phone: str


class FixedAnalysisResult(BaseModel):
    success: bool
    message: str
    ai_result: str
    pdf_url: Optional[str] = None
    savings: Optional[float] = None
    invoice_type: Optional[str] = None
    quality_score: Optional[str] = None


class ErrorResponse(BaseModel):
    success: bool = False
    error: str


# Events
@app.on_event("startup")
async def startup_event():
    """Initialize application with corrected components"""
    create_tables()

    try:
        # Test components
        logger.info("üîß Initialisation des composants corrig√©s...")

        # Test AI connection
        test_result = ai_analyzer.client.models.list()
        logger.info("‚úÖ OpenAI connect√©")

        logger.info("‚úÖ G√©n√©rateur PDF corrig√© initialis√©")
        logger.info("üöÄ Application d√©marr√©e avec corrections compl√®tes")

    except Exception as e:
        logger.error(f"‚ö†Ô∏è Erreur initialisation: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    logger.info("Application ferm√©e")


# Utility functions
def allowed_file(filename: str) -> bool:
    """Check if file extension is allowed"""
    return '.' in filename and \
        filename.rsplit('.', 1)[1].lower() in Config.ALLOWED_EXTENSIONS


# Routes
@app.get("/")
async def root():
    return {
        "message": "Analyseur de Factures API - Version Corrig√©e",
        "version": "2.1.0",
        "corrections": [
            "‚úÖ Espacement PDF corrig√©",
            "‚úÖ Tableaux sans d√©bordement",
            "‚úÖ Polices plus grasses",
            "‚úÖ D√©tection type de facture",
            "‚úÖ G√©n√©ration coh√©rente",
            "‚úÖ Puces simples (‚ñ†)"
        ]
    }


@app.get("/health")
async def health_check():
    """Health check d√©taill√© avec status des corrections"""
    try:
        # Test IA
        ai_status = "OK"
        try:
            ai_analyzer.client.models.list()
        except Exception as e:
            ai_status = f"Erreur: {str(e)[:50]}"

        # Test base de donn√©es
        db_status = "OK"
        try:
            from database import SessionLocal
            db = SessionLocal()
            db.execute("SELECT 1")
            db.close()
        except Exception as e:
            db_status = f"Erreur: {str(e)[:50]}"

        return {
            "status": "healthy",
            "message": "API avec corrections compl√®tes",
            "components": {
                "openai": ai_status,
                "database": db_status,
                "ocr": "OK",
                "pdf_generator": "CORRIG√â ‚úÖ",
                "ai_analyzer": "CORRIG√â ‚úÖ"
            },
            "corrections_applied": [
                "Espacement PDF optimis√©",
                "Tableaux avec largeurs fixes",
                "Polices grasses am√©lior√©es",
                "D√©tection intelligente type facture",
                "G√©n√©ration coh√©rente sans 'Non calculable'",
                "Puces simples sans duplication"
            ],
            "version": "2.1.0"
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e)
        }


@app.post("/api/users", response_model=UserResponse)
async def create_user(
        user_data: UserCreate,
        db: Session = Depends(get_db)
):
    """Create a new user"""
    try:
        # Check for duplicate email
        existing_user = db.query(User).filter(User.email == user_data.email).first()
        if existing_user:
            raise HTTPException(status_code=400, detail="Cet email est d√©j√† utilis√©")

        # Check for duplicate phone
        existing_phone = db.query(User).filter(User.phone == user_data.phone).first()
        if existing_phone:
            raise HTTPException(status_code=400, detail="Ce num√©ro de t√©l√©phone est d√©j√† utilis√©")

        # Create new user
        user = User(
            first_name=user_data.first_name,
            last_name=user_data.last_name,
            email=user_data.email,
            phone=user_data.phone,
            accept_callback=user_data.accept_callback,
            ip_address="127.0.0.1"
        )

        db.add(user)
        db.commit()
        db.refresh(user)

        logger.info(f"Utilisateur cr√©√©: {user.email}")

        return UserResponse(
            id=user.id,
            first_name=user.first_name,
            last_name=user.last_name,
            email=user.email,
            phone=user.phone
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur cr√©ation utilisateur: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur interne du serveur")


@app.post("/api/analyze", response_model=FixedAnalysisResult)
async def analyze_invoice_fixed(
        first_name: str = Form(...),
        last_name: str = Form(...),
        email: EmailStr = Form(...),
        phone: str = Form(...),
        accept_callback: bool = Form(True),
        user_id: Optional[int] = Form(None),
        invoice: UploadFile = File(...),
        db: Session = Depends(get_db)
):
    """Analyse corrig√©e avec formatage PDF professionnel"""
    try:
        # Validation du fichier
        if not invoice.filename:
            raise HTTPException(status_code=400, detail="Aucun fichier fourni")

        if not allowed_file(invoice.filename):
            raise HTTPException(status_code=400, detail="Type de fichier non valide")

        logger.info(f"üîß D√©but analyse corrig√©e: {invoice.filename}")

        # Cr√©er ou r√©cup√©rer utilisateur
        if not user_id:
            existing_user = db.query(User).filter(User.email == email).first()
            if existing_user:
                raise HTTPException(status_code=400, detail="Cet email est d√©j√† utilis√©")

            existing_phone = db.query(User).filter(User.phone == phone).first()
            if existing_phone:
                raise HTTPException(status_code=400, detail="Ce num√©ro de t√©l√©phone est d√©j√† utilis√©")

            user = User(
                first_name=first_name,
                last_name=last_name,
                email=email,
                phone=phone,
                accept_callback=accept_callback,
                ip_address="127.0.0.1"
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            user_id = user.id
            logger.info(f"‚úÖ Nouvel utilisateur cr√©√©: {email}")
        else:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")

        # Sauvegarder fichier temporairement
        file_extension = Path(invoice.filename).suffix.lower()
        unique_filename = f"invoice_{uuid.uuid4().hex}{file_extension}"
        temp_path = os.path.join(tempfile.gettempdir(), unique_filename)

        with open(temp_path, "wb") as buffer:
            content = await invoice.read()
            buffer.write(content)

        logger.info(f"üìÅ Fichier sauv√©: {temp_path} ({len(content)} bytes)")

        # √âTAPE 1: Extraction OCR
        logger.info("üîç Extraction OCR...")
        extracted_text = ocr_processor.extract_text_from_file(temp_path)

        if not ocr_processor.is_text_extracted(extracted_text):
            raise HTTPException(
                status_code=400,
                detail="Aucun texte lisible extrait. V√©rifiez la qualit√© du document."
            )

        clean_text = ocr_processor.preprocess_text(extracted_text)
        logger.info(f"‚úÖ OCR r√©ussi: {len(clean_text)} caract√®res")

        # √âTAPE 2: Analyse IA corrig√©e avec d√©tection de type
        logger.info("ü§ñ Analyse IA corrig√©e avec d√©tection de type...")
        analysis_result = ai_analyzer.analyze_invoice(clean_text)

        structured_data = analysis_result['structured_data']
        invoice_type = structured_data.get('type_facture', 'inconnu')
        invoice_subtype = structured_data.get('invoice_subtype', 'standard')

        logger.info(f"‚úÖ Type d√©tect√©: {invoice_type} ({invoice_subtype})")

        # √âTAPE 3: Calcul des √©conomies adapt√©
        savings = ai_analyzer.calculate_savings(structured_data)
        if savings:
            logger.info(f"üí∞ √âconomies calcul√©es: {savings}‚Ç¨/an")
        else:
            logger.info(f"üí∞ √âconomies: √Ä √©valuer (type: {invoice_subtype})")

        # √âTAPE 4: G√©n√©ration PDF corrig√©e
        logger.info("üìÑ G√©n√©ration PDF avec corrections...")
        internal_pdf_path, user_pdf_path = pdf_generator.generate_reports(structured_data, user_id)

        # √âTAPE 5: Sauvegarde
        invoice_record = Invoice(
            user_id=user_id,
            file_path=temp_path,
            report_path=user_pdf_path,
            internal_report_path=internal_pdf_path,
            savings_12_percent=savings
        )
        db.add(invoice_record)
        db.commit()

        # √âTAPE 6: R√©sum√© pour popup
        popup_summary = pdf_generator.generate_popup_summary(structured_data)

        # Nettoyage
        try:
            os.unlink(temp_path)
            logger.info("üóëÔ∏è Fichier temporaire supprim√©")
        except Exception as e:
            logger.warning(f"Impossible de supprimer {temp_path}: {e}")

        # R√©sultat final
        logger.info(f"‚úÖ Analyse corrig√©e termin√©e pour {email}")

        # √âvaluation qualit√©
        quality_score = "excellent" if len(clean_text) > 500 else "bon" if len(clean_text) > 200 else "moyen"

        return FixedAnalysisResult(
            success=True,
            message=f"Analyse corrig√©e compl√©t√©e - Type: {invoice_type} ({invoice_subtype})",
            ai_result=popup_summary,
            pdf_url=user_pdf_path,
            savings=savings,
            invoice_type=f"{invoice_type}_{invoice_subtype}",
            quality_score=quality_score
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur analyse: {str(e)}")
        # Nettoyage en cas d'erreur
        try:
            if 'temp_path' in locals() and os.path.exists(temp_path):
                os.unlink(temp_path)
        except:
            pass
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'analyse: {str(e)}")


@app.get("/api/download-report/{filename}")
async def download_report(filename: str):
    """T√©l√©chargement de rapport PDF corrig√©"""
    try:
        # V√©rifier dans les dossiers
        user_path = os.path.join(Config.REPORTS_FOLDER, filename)
        internal_path = os.path.join(Config.REPORTS_INTERNAL_FOLDER, filename)

        if os.path.exists(user_path):
            logger.info(f"üì• T√©l√©chargement rapport utilisateur corrig√©: {filename}")
            return FileResponse(
                user_path,
                media_type='application/pdf',
                filename=filename,
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
        elif os.path.exists(internal_path):
            logger.info(f"üì• T√©l√©chargement rapport interne: {filename}")
            return FileResponse(
                internal_path,
                media_type='application/pdf',
                filename=filename,
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
        else:
            raise HTTPException(status_code=404, detail="Rapport non trouv√©")

    except Exception as e:
        logger.error(f"Erreur t√©l√©chargement {filename}: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur lors du t√©l√©chargement")


@app.post("/api/test-ocr")
async def test_ocr_enhanced(file: UploadFile = File(...)):
    """Test OCR avec d√©tails de qualit√©"""
    try:
        if not allowed_file(file.filename):
            raise HTTPException(status_code=400, detail="Type de fichier non valide")

        # Sauvegarder temporairement
        file_extension = Path(file.filename).suffix.lower()
        unique_filename = f"test_{uuid.uuid4().hex}{file_extension}"
        temp_path = os.path.join(tempfile.gettempdir(), unique_filename)

        with open(temp_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)

        # Extraction OCR
        extracted_text = ocr_processor.extract_text_from_file(temp_path)
        clean_text = ocr_processor.preprocess_text(extracted_text)

        # Analyse de qualit√©
        word_count = len(clean_text.split())
        line_count = len(clean_text.split('\n'))
        char_count = len(clean_text)

        # D√©tection du type
        doc_type = "inconnu"
        if any(word in clean_text.lower() for word in ['souscription', 'mise en service']):
            doc_type = "souscription"
        elif any(word in clean_text.lower() for word in ['kwh', '√©lectricit√©', 'edf']):
            doc_type = "√©lectricit√©"
        elif any(word in clean_text.lower() for word in ['gaz', 'naturel']):
            doc_type = "gaz"
        elif any(word in clean_text.lower() for word in ['internet', 'fibre']):
            doc_type = "internet"

        # Nettoyage
        os.unlink(temp_path)

        return {
            "success": True,
            "filename": file.filename,
            "file_size": len(content),
            "text_length": char_count,
            "word_count": word_count,
            "line_count": line_count,
            "document_type": doc_type,
            "extracted_preview": clean_text[:300] + "..." if len(clean_text) > 300 else clean_text,
            "text_quality": "excellent" if char_count > 500 else "bon" if char_count > 200 else "moyen",
            "analysis_ready": ocr_processor.is_text_extracted(extracted_text),
            "corrections_applied": "‚úÖ OCR optimis√©"
        }

    except Exception as e:
        logger.error(f"Erreur test OCR: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur OCR: {str(e)}")


@app.get("/api/corrections-info")
async def get_corrections_info():
    """Informations sur les corrections apport√©es"""
    return {
        "version": "2.1.0",
        "corrections_applied": {
            "pdf_formatting": {
                "espacement": "‚úÖ Espacement entre sections optimis√© (4mm au lieu d'excessif)",
                "tableaux": "‚úÖ Largeurs de colonnes fixes pour √©viter d√©bordements",
                "polices": "‚úÖ Polices plus grasses (Arial/Helvetica Bold quand disponible)",
                "puces": "‚úÖ Puces simples (‚ñ†) sans duplication"
            },
            "ai_analysis": {
                "detection_type": "‚úÖ D√©tection automatique du type de facture",
                "souscription": "‚úÖ Gestion sp√©ciale des factures de souscription",
                "coherence": "‚úÖ √âlimination des 'Non calculable' inappropri√©s",
                "adaptation": "‚úÖ Prompts adapt√©s selon le type de document"
            },
            "content_quality": {
                "alternatives": "‚úÖ Maximum 4 fournisseurs pour lisibilit√©",
                "issues": "‚úÖ Probl√®mes limit√©s √† 4 points concrets",
                "text_length": "‚úÖ Limitation longueur texte dans tableaux",
                "fallback": "‚úÖ R√©ponses de secours coh√©rentes"
            }
        },
        "test_recommendations": [
            "Tester avec facture de souscription (comme EDF Samuel Rivas)",
            "Tester avec facture de consommation standard",
            "V√©rifier le formatage PDF (espacement, tableaux)",
            "Contr√¥ler la coh√©rence du contenu g√©n√©r√©"
        ]
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)