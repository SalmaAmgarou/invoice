import re
import json
import logging
from typing import Dict, Optional, Tuple, List, Any
from openai import OpenAI
from config import Config

logger = logging.getLogger(__name__)


class EnhancedInvoiceAnalyzer:
    def __init__(self):
        if not Config.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY n'est pas configur√©")

        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)

        # Mapping d√©taill√© des types de factures
        self.invoice_patterns = {
            'electricite': {
                'keywords': ['kwh', '√©lectricit√©', 'edf', 'engie', 'totalenergies',
                             'tarif bleu', 'heures creuses', 'heures pleines'],
                'providers': ['EDF', 'Engie', 'TotalEnergies', 'OHM', 'ekWateur',
                              'Vattenfall', 'Plan√®te OUI', 'Mint √ânergie', 'Alpiq']
            },
            'gaz': {
                'keywords': ['gaz naturel', 'm3', 'm√®tres cubes', 'thermes'],
                'providers': ['Engie', 'TotalEnergies', 'ENI', 'ekWateur', 'Vattenfall']
            },
            'dual': {  # Nouvelle cat√©gorie
                'keywords': ['offre duale', 'bi-√©nergie', '√©lectricit√© et gaz'],
                'providers': ['EDF', 'Engie', 'TotalEnergies', 'Eni', 'OHM']
            },
            'internet': {
                'keywords': ['internet', 'fibre', 'adsl', 'livebox', 'freebox'],
                'providers': ['Orange', 'Free', 'SFR', 'Bouygues', 'RED', 'Sosh']
            },
            'mobile': {
                'keywords': ['mobile', 'forfait', 'go', '4g', '5g'],
                'providers': ['Orange', 'Free', 'SFR', 'Bouygues', 'RED', 'Sosh']
            },
            'internet_mobile': {
                'keywords': ['open', 'pack', 'offre group√©e', 'convergente'],
                'providers': ['Orange', 'Free', 'SFR', 'Bouygues']
            },
            'eau': {  # Nouveau type
                'keywords': ['eau potable', 'm3', 'assainissement', 'consommation eau'],
                'providers': ['Veolia', 'Suez', 'SAUR', 'R√©gie municipale']
            },
            'assurance_auto': {
                'keywords': ['assurance auto', 'v√©hicule', 'sinistre', 'franchise'],
                'providers': ['AXA', 'Allianz', 'MAIF', 'MACIF', 'Matmut', 'MMA']
            },
            'assurance_habitation': {
                'keywords': ['assurance habitation', 'multirisque', 'logement'],
                'providers': ['AXA', 'Allianz', 'MAIF', 'MACIF', 'Matmut', 'MMA']
            }
        }

    def analyze_invoice_with_type(self, extracted_text: str, invoice_type: str, db_offers: List[Dict] = None) -> \
    Dict[str, Any]:
        """
        Analyse avec type pr√©d√©fini par l'utilisateur (pas de d√©tection automatique)
        """
        try:
            logger.info(f"üéØ Analyse pour type d√©fini: {invoice_type}")

            # Extraction structur√©e directe avec le type fourni
            structured_data = self._extract_structured_data_with_offers(
                extracted_text,
                invoice_type,
                db_offers
            )

            # Analyse des probl√®mes selon le type
            issues = self._detect_issues(structured_data, invoice_type)

            # Compilation du r√©sultat
            result = {
                'type_facture': invoice_type,
                'confidence': 100,  # 100% car d√©fini par l'utilisateur
                'client_info': structured_data.get('client_info', {}),
                'current_offer': structured_data.get('current_offer', {}),
                'alternatives': structured_data.get('alternatives', []),
                'detected_issues': issues,
                'best_savings': structured_data.get('best_savings', {}),
                'methodology': self._get_methodology(invoice_type),
                'structured_data': structured_data
            }

            return {
                'structured_data': result,
                'raw_response': json.dumps(result, ensure_ascii=False, indent=2)
            }

        except Exception as e:
            logger.error(f"Erreur analyse avec type: {str(e)}")
            raise

    def _get_generic_extraction_prompt(self) -> str:
        """
        Retourne un prompt g√©n√©rique pour l'extraction de donn√©es de base
        quand le type de facture est inconnu.
        """
        logger.info("Utilisation du prompt d'extraction g√©n√©rique pour un type de facture inconnu.")
        return """
        Tu es un assistant intelligent d'extraction de donn√©es. Le type de document suivant est inconnu.
        Analyse le texte et extrais les informations les plus pertinentes que tu peux trouver, comme :
        - Le nom du fournisseur
        - Le montant total
        - La date du document
        - Un num√©ro de client ou de contrat

        Retourne ces informations dans un format JSON simple. Si une information n'est pas trouv√©e, indique "non trouv√©".
        """

    def analyze_invoice(self, extracted_text: str, db_offers: List[Dict] = None) -> Dict[str, Any]:
        """Analyse compl√®te avec d√©tection intelligente et comparaison via offres DB"""
        try:
            # 1. D√âTECTION AVANC√âE DU TYPE
            invoice_type, confidence = self._advanced_type_detection(extracted_text)
            logger.info(f"üéØ Type d√©tect√©: {invoice_type} (confiance: {confidence}%)")

            # 2. EXTRACTION STRUCTUR√âE PAR TYPE avec offres DB (RAG-style)
            structured_data = self._extract_structured_data_with_offers(extracted_text, invoice_type, db_offers)

            # 3. ANALYSE DES PI√àGES ET OPTIMISATIONS
            issues = self._detect_issues(structured_data, invoice_type)

            # 4. COMPILATION DU R√âSULTAT FINAL
            result = {
                'type_facture': invoice_type,
                'confidence': confidence,
                'client_info': structured_data.get('client_info', {}),
                'current_offer': structured_data.get('current_offer', {}),
                'alternatives': structured_data.get('alternatives', []),
                'detected_issues': issues,
                'best_savings': structured_data.get('best_savings', {}),
                'methodology': self._get_methodology(invoice_type),
                'structured_data': structured_data
            }

            return {
                'structured_data': result,
                'raw_response': json.dumps(result, ensure_ascii=False, indent=2)
            }

        except Exception as e:
            logger.error(f"Erreur analyse: {str(e)}")
            raise

    def _advanced_type_detection(self, text: str) -> Tuple[str, int]:
        """D√©tection avanc√©e du type de facture avec score de confiance"""
        text_lower = text.lower()
        scores = {}

        for invoice_type, patterns in self.invoice_patterns.items():
            score = 0

            # Points positifs pour mots-cl√©s trouv√©s
            for keyword in patterns['keywords']:
                if keyword in text_lower:
                    score += 10

            # Points bonus pour fournisseurs identifi√©s
            for provider in patterns['providers']:
                if provider.lower() in text_lower:
                    score += 20

            # Points n√©gatifs pour exclusions
            for negative in patterns['negative']:
                if negative in text_lower:
                    score -= 15

            scores[invoice_type] = max(0, score)

        # D√©tection sp√©ciale pour factures combin√©es
        if scores.get('internet', 0) > 30 and scores.get('mobile', 0) > 30:
            return 'internet_mobile', 95

        # Retourner le type avec le score le plus √©lev√©
        if scores:
            best_type = max(scores, key=scores.get)
            confidence = min(100, scores[best_type])

            # Si confiance trop faible, utiliser l'analyse GPT
            if confidence < 40:
                return self._gpt_type_detection(text)

            return best_type, confidence

        return 'inconnu', 0

    def _gpt_type_detection(self, text: str) -> Tuple[str, int]:
        """D√©tection par GPT en cas d'incertitude"""
        prompt = """Analyse ce texte de facture et d√©termine son type EXACT.

Types possibles (CHOISIR UN SEUL):
- electricite
- gaz
- internet
- mobile
- internet_mobile
- assurance_auto
- assurance_habitation
- autre

R√©ponds UNIQUEMENT avec le type, rien d'autre."""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": text[:1000]}
                ],
                max_tokens=10,
                temperature=0
            )

            detected_type = response.choices[0].message.content.strip().lower()

            if detected_type in self.invoice_patterns:
                return detected_type, 80

        except Exception as e:
            logger.error(f"Erreur GPT detection: {e}")

        return 'inconnu', 0

    def _extract_structured_data_with_offers(self, text: str, invoice_type: str, db_offers: List[Dict] = None) -> Dict:
        """Extraction structur√©e avec offres DB pour comparaison (RAG-style)"""

        # Construire le prompt avec les offres DB si disponibles
        offers_context = ""
        if db_offers:
            offers_context = f"\n\nOffres disponibles pour comparaison:\n{json.dumps(db_offers, ensure_ascii=False, indent=2)}"

        # Prompt sp√©cialis√© selon le type avec sch√©ma JSON strict
        prompt = self._get_specialized_extraction_prompt_with_schema(invoice_type, offers_context)

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": f"Texte de la facture:\n{text}"}
                ],
                max_tokens=2000,
                temperature=0.0,
                response_format={"type": "json_object"}
            )

            content = response.choices[0].message.content
            try:
                result = json.loads(content)

                # Fallback: si pas assez d'alternatives, utiliser toutes les offres DB
                if db_offers and len(result.get('alternatives', [])) < len(db_offers):
                    logger.info(
                        f"LLM n'a g√©n√©r√© que {len(result.get('alternatives', []))} alternatives, utilisation de toutes les {len(db_offers)} offres DB")
                    result['alternatives'] = db_offers

                return result
            except Exception as e:
                logger.error(f"Erreur parsing JSON: {e}")
                # Dernier recours: tenter d'extraire un objet JSON si pr√©sent
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    result = json.loads(json_match.group())
                    # Fallback: utiliser toutes les offres DB
                    if db_offers:
                        result['alternatives'] = db_offers
                    return result
        except Exception as e:
            logger.error(f"Erreur extraction: {e}")

        # Fallback final: utiliser toutes les offres DB
        if db_offers:
            logger.info("Utilisation du fallback avec toutes les offres DB")
            return {
                'type_facture': invoice_type,
                'client_info': {'nom': '√Ä extraire'},
                'current_offer': {'fournisseur': '√Ä identifier'},
                'alternatives': db_offers,
                'best_savings': {'economie_annuelle': '√Ä calculer'}
            }

        return self._get_fallback_structure(invoice_type)

    def _get_specialized_extraction_prompt_with_schema(self, invoice_type: str, offers_context: str) -> str:
        """Retourne le prompt sp√©cialis√© avec sch√©ma JSON strict selon le type"""

        if invoice_type == 'electricite':
            return f"""Tu es expert en factures d'√©lectricit√© fran√ßaises. Extrais PR√âCIS√âMENT selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse compl√®te",
        "numero_pdl": "Point de livraison si pr√©sent",
        "numero_contrat": "N¬∞ contrat si pr√©sent"
      }},
      "current_offer": {{
        "fournisseur": "Nom exact du fournisseur",
        "offre_nom": "Nom exact de l'offre",
        "puissance_souscrite": "Puissance en kVA (ex: 6)",
        "option_tarifaire": "Base ou HP/HC",
        "consommation_annuelle": "Consommation annuelle en kWh",
        "montant_total_annuel": "Montant total annuel TTC en euros",
        "prix_kwh": "Prix du kWh TTC en euros",
        "abonnement_annuel": "Abonnement annuel TTC en euros",
        "details": {{
          "prix_hp": "Prix kWh heures pleines si HP/HC",
          "prix_hc": "Prix kWh heures creuses si HP/HC",
          "repartition_hp_hc": "R√©partition HP/HC si applicable"
        }}
      }},
      "consommation": {{
        "periode": "P√©riode de facturation",
        "kwh_consommes": "Total kWh consomm√©s",
        "index_releve": "Index compteur si pr√©sent"
      }},
      "alternatives": [
        {{
          "fournisseur": "Nom du fournisseur",
          "offre": "Nom de l'offre",
          "prix_kwh": "Prix kWh TTC",
          "abonnement_annuel": "Abonnement annuel TTC",
          "total_annuel": "Total annuel calcul√© TTC",
          "type_offre": "base ou hphc"
        }}
      ],
      "best_savings": {{
        "fournisseur_recommande": "Nom du fournisseur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "pourcentage_economie": "Pourcentage d'√©conomie"
      }}
    }}

    IMPORTANT: Utilise TOUTES les offres disponibles pour remplir 'alternatives'. Ne limite pas le nombre d'alternatives. Chaque offre doit avoir un 'type_offre' correct ('base' ou 'hphc').{offers_context}"""

        elif invoice_type == 'gaz':
            return f"""Tu es expert en factures de gaz fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse compl√®te",
        "numero_pce": "Point comptage et √©mission si pr√©sent",
        "numero_contrat": "N¬∞ contrat si pr√©sent"
      }},
      "current_offer": {{
        "fournisseur": "Nom exact du fournisseur",
        "offre_nom": "Nom exact de l'offre",
        "classe_consommation": "Classe B0/B1/B2I si pr√©sente",
        "consommation_annuelle": "Consommation annuelle en kWh",
        "montant_total_annuel": "Montant total annuel TTC en euros",
        "prix_kwh": "Prix du kWh TTC en euros",
        "abonnement_annuel": "Abonnement annuel TTC en euros"
      }},
      "consommation": {{
        "periode": "P√©riode de facturation",
        "kwh_consommes": "Total kWh consomm√©s",
        "m3_consommes": "Total m¬≥ consomm√©s si pr√©sent",
        "coefficient_conversion": "Coefficient de conversion m¬≥ vers kWh si pr√©sent"
      }},
      "alternatives": [
        {{
          "fournisseur": "Nom du fournisseur",
          "offre": "Nom de l'offre",
          "prix_kwh": "Prix kWh TTC",
          "abonnement": "Abonnement annuel TTC",
          "total_annuel": "Total annuel calcul√© TTC",
          "type_gaz": "gaz naturel ou biogaz %"
        }}
      ],
      "best_savings": {{
        "fournisseur_recommande": "Nom du fournisseur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "pourcentage_economie": "Pourcentage d'√©conomie"
      }}
    }}

    Utilise les offres disponibles pour remplir 'alternatives' et calculer 'best_savings'.{offers_context}"""

        elif invoice_type == 'dual' or invoice_type == 'electricite_gaz':
            return f"""Tu es expert en factures duales √©lectricit√©/gaz fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse compl√®te",
        "numero_pdl": "Point de livraison √©lectricit√©",
        "numero_pce": "Point comptage gaz",
        "numero_contrat": "N¬∞ contrat unique ou s√©par√©s"
      }},
      "current_offer": {{
        "fournisseur": "Nom du fournisseur unique",
        "offre_nom": "Nom de l'offre duale",
        "electricite": {{
          "consommation_annuelle_kwh": "Consommation √©lectricit√© en kWh",
          "montant_annuel": "Montant annuel √©lectricit√© ‚Ç¨",
          "prix_kwh": "Prix kWh √©lectricit√©",
          "abonnement_annuel": "Abonnement √©lectricit√© ‚Ç¨",
          "puissance_souscrite": "Puissance kVA",
          "option_tarifaire": "Base ou HP/HC"
        }},
        "gaz": {{
          "consommation_annuelle_kwh": "Consommation gaz en kWh",
          "montant_annuel": "Montant annuel gaz ‚Ç¨",
          "prix_kwh": "Prix kWh gaz",
          "abonnement_annuel": "Abonnement gaz ‚Ç¨",
          "classe_consommation": "B0/B1/B2I"
        }},
        "montant_total_annuel": "Total annuel combin√© ‚Ç¨",
        "reduction_duale": "R√©duction pour offre group√©e si applicable"
      }},
      "alternatives": [
        {{
          "fournisseur": "Nom du fournisseur",
          "offre": "Nom de l'offre duale",
          "electricite_prix_kwh": "Prix kWh √©lectricit√©",
          "gaz_prix_kwh": "Prix kWh gaz",
          "total_annuel": "Total annuel calcul√© TTC",
          "avantages": "Avantages offre duale"
        }}
      ],
      "best_savings": {{
        "fournisseur_recommande": "Nom du fournisseur recommand√©",
        "economie_annuelle": "√âconomie annuelle totale en euros",
        "economie_electricite": "√âconomie sur l'√©lectricit√© ‚Ç¨",
        "economie_gaz": "√âconomie sur le gaz ‚Ç¨"
      }}
    }}

    Utilise les offres √©lectricit√© ET gaz disponibles. Privil√©gie les offres duales combin√©es.{offers_context}"""

        elif invoice_type == 'internet':
            return f"""Tu es expert en factures internet/fibre fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse de service",
        "numero_client": "N¬∞ client",
        "numero_ligne": "N¬∞ ligne fixe associ√©e",
        "reference_pto": "R√©f√©rence PTO fibre si pr√©sente"
      }},
      "current_offer": {{
        "fournisseur": "Orange|Free|SFR|Bouygues|RED|Sosh",
        "offre_nom": "Nom exact de l'offre box",
        "type_connexion": "Fibre|ADSL|VDSL",
        "debit": "D√©bit en Mbps ou Gbps",
        "prix_mensuel": "Prix mensuel TTC ‚Ç¨",
        "prix_promo": "Prix promotionnel si applicable",
        "duree_promo": "Dur√©e de la promotion",
        "montant_total_annuel": "Montant annuel calcul√©",
        "services_inclus": {{
          "tv": "Oui/Non et nombre de cha√Ænes",
          "telephone_fixe": "Illimit√© vers fixes/mobiles",
          "options": "Netflix, Canal+, etc."
        }},
        "engagement": "Date fin engagement ou sans engagement",
        "frais_resiliation": "Montant si applicable"
      }},
      "consommation": {{
        "data_consommee": "Volume donn√©es si plafonn√©",
        "appels_fixes": "Minutes consomm√©es si non illimit√©"
      }},
      "alternatives": [
        {{
          "fournisseur": "Nom du fournisseur",
          "offre": "Nom de l'offre",
          "type": "Fibre/ADSL",
          "prix_mensuel": "Prix mensuel TTC",
          "prix_promo": "Prix promo 1√®re ann√©e",
          "total_annuel": "Total annuel calcul√©",
          "avantages": "Points forts de l'offre"
        }}
      ],
      "best_savings": {{
        "fournisseur_recommande": "Nom du fournisseur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "services_supplementaires": "Services en plus par rapport √† l'offre actuelle"
      }}
    }}

    Compare avec les offres internet disponibles sur le march√©.{offers_context}"""

        elif invoice_type == 'mobile':
            return f"""Tu es expert en factures mobile fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "numero_telephone": "06/07 XX XX XX XX",
        "numero_client": "N¬∞ client",
        "numero_contrat": "N¬∞ contrat ou compte"
      }},
      "current_offer": {{
        "fournisseur": "Orange|Free|SFR|Bouygues|RED|Sosh|B&You",
        "offre_nom": "Nom exact du forfait",
        "prix_mensuel": "Prix mensuel TTC ‚Ç¨",
        "data_incluse": "Go de data inclus",
        "data_europe": "Go en Europe/DOM",
        "appels": "Illimit√©s ou X heures",
        "sms_mms": "Illimit√©s ou nombre",
        "5g": "Oui/Non",
        "montant_total_annuel": "Montant annuel calcul√©",
        "engagement": "Avec ou sans engagement",
        "options": {{
          "multi_sim": "Oui/Non",
          "international": "Pays inclus",
          "autres": "Autres options souscrites"
        }}
      }},
      "consommation": {{
        "data_consommee": "Go consomm√©s sur la p√©riode",
        "appels": "Minutes consomm√©es",
        "sms": "Nombre de SMS envoy√©s",
        "hors_forfait": "Montant hors forfait si applicable"
      }},
      "alternatives": [
        {{
          "fournisseur": "Nom du fournisseur",
          "offre": "Nom du forfait",
          "prix_mensuel": "Prix mensuel TTC",
          "data": "Go inclus",
          "5g": "Inclus ou non",
          "total_annuel": "Total annuel",
          "avantages": "Points forts"
        }}
      ],
      "best_savings": {{
        "fournisseur_recommande": "Nom du fournisseur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "data_supplementaire": "Go en plus par rapport au forfait actuel"
      }}
    }}

    Compare avec les forfaits mobile actuels du march√©.{offers_context}"""

        elif invoice_type == 'internet_mobile':
            return f"""Tu es expert en factures convergentes internet+mobile fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse de service",
        "numero_client": "N¬∞ client unique",
        "reference_pto": "R√©f√©rence fibre si pr√©sente"
      }},
      "current_offer": {{
        "fournisseur": "Orange|SFR|Free|Bouygues",
        "offre_nom": "Nom de l'offre convergente",
        "prix_mensuel_total": "Prix mensuel pack TTC ‚Ç¨",
        "montant_total_annuel": "Montant annuel calcul√©",
        "internet": {{
          "type": "Fibre/ADSL",
          "debit": "D√©bit Mbps/Gbps",
          "tv_incluse": "Oui/Non + cha√Ænes",
          "telephone_fixe": "Illimit√© vers"
        }},
        "mobile": {{
          "nombre_lignes": "Nombre de forfaits mobiles",
          "forfait_principal": "Go et prix forfait principal",
          "forfaits_additionnels": "D√©tails lignes suppl√©mentaires",
          "data_partagee": "Enveloppe data partag√©e si applicable"
        }},
        "avantages_convergence": "R√©ductions ou avantages du pack",
        "engagement": "Date fin engagement si applicable"
      }},
      "consommation": {{
        "data_mobile_totale": "Go consomm√©s toutes lignes",
        "streaming_inclus": "Netflix, Disney+, etc."
      }},
      "alternatives": [
        {{
          "fournisseur": "Nom du fournisseur",
          "offre": "Nom offre convergente",
          "prix_mensuel": "Prix mensuel TTC",
          "composition": "Box + X forfaits",
          "total_annuel": "Total annuel calcul√©",
          "avantages": "Avantages du pack"
        }}
      ],
      "best_savings": {{
        "fournisseur_recommande": "Nom du fournisseur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "services_supplementaires": "Ce qui est gagn√© en plus"
      }}
    }}

    Compare avec les offres convergentes (Open, Freebox Pop + mobile, etc.).{offers_context}"""

        elif invoice_type == 'eau':
            return f"""Tu es expert en factures d'eau fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse de desserte",
        "numero_contrat": "N¬∞ contrat ou abonn√©",
        "numero_compteur": "N¬∞ compteur d'eau"
      }},
      "current_offer": {{
        "distributeur": "Veolia|Suez|SAUR|R√©gie municipale|Autre",
        "gestionnaire": "Nom de la collectivit√© ou syndicat",
        "consommation_periode": "m¬≥ sur la p√©riode",
        "consommation_annuelle_m3": "Consommation annuelle estim√©e en m¬≥",
        "montant_total_annuel": "Montant total annuel TTC ‚Ç¨",
        "detail_tarification": {{
          "part_fixe_abonnement": "Abonnement annuel ‚Ç¨",
          "prix_m3_eau_potable": "Prix du m¬≥ eau potable",
          "prix_m3_assainissement": "Prix du m¬≥ assainissement",
          "taxes_agence_eau": "Redevances agence de l'eau ‚Ç¨",
          "tva": "Montant TVA"
        }},
        "type_tarification": "Binomiale|Volum√©trique|Forfaitaire"
      }},
      "consommation": {{
        "periode": "P√©riode de facturation",
        "index_ancien": "Index pr√©c√©dent",
        "index_nouveau": "Nouvel index",
        "m3_consommes": "m¬≥ consomm√©s",
        "moyenne_journaliere": "Litres/jour si indiqu√©"
      }},
      "alternatives": [
        {{
          "type": "Information",
          "message": "Le service d'eau est un monopole local - pas de changement de fournisseur possible",
          "conseil": "√âconomies possibles uniquement par r√©duction de consommation"
        }}
      ],
      "best_savings": {{
        "recommandations": [
          "V√©rifier les fuites (compteur qui tourne robinets ferm√©s)",
          "Installer des mousseurs sur les robinets",
          "Privil√©gier les douches aux bains",
          "R√©cup√©ration eau de pluie pour jardin"
        ],
        "economie_potentielle": "20-30% par les √©co-gestes",
        "aide_fuite": "√âcr√™tement possible de la facture en cas de fuite apr√®s compteur"
      }}
    }}

    Note: L'eau est un service public local sans concurrence. Focus sur les conseils d'√©conomie.{offers_context}"""

        elif invoice_type == 'assurance_auto':
            return f"""Tu es expert en factures d'assurance automobile fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse": "Adresse du souscripteur",
        "numero_contrat": "N¬∞ contrat ou police",
        "numero_societaire": "N¬∞ soci√©taire si mutuelle"
      }},
      "current_offer": {{
        "assureur": "Nom de la compagnie d'assurance",
        "type_contrat": "Tous risques|Tiers √©tendu|Tiers|Au kilom√®tre",
        "vehicule": {{
          "marque_modele": "Marque et mod√®le",
          "immatriculation": "Plaque d'immatriculation",
          "annee": "Ann√©e du v√©hicule",
          "valeur_argus": "Valeur √† dire d'expert si indiqu√©e"
        }},
        "prime_annuelle": "Prime annuelle TTC ‚Ç¨",
        "mensualite": "Si paiement mensuel ‚Ç¨/mois",
        "bonus_malus": "Coefficient bonus-malus",
        "franchises": {{
          "bris_glace": "Franchise bris de glace ‚Ç¨",
          "vol": "Franchise vol ‚Ç¨",
          "accident": "Franchise accident responsable ‚Ç¨"
        }},
        "garanties": {{
          "responsabilite_civile": "Obligatoire - montants",
          "dommages_collision": "Oui/Non",
          "vol_incendie": "Oui/Non",
          "bris_glace": "Oui/Non",
          "assistance": "0 km ou X km",
          "protection_juridique": "Oui/Non",
          "garantie_conducteur": "Capital si accident"
        }},
        "date_echeance": "Date √©ch√©ance annuelle"
      }},
      "conducteurs": {{
        "principal": "Nom et date permis",
        "secondaires": "Autres conducteurs d√©clar√©s"
      }},
      "alternatives": [
        {{
          "assureur": "Nom assureur",
          "formule": "Type de formule",
          "prime_annuelle": "Prime annuelle TTC",
          "franchises": "Niveau franchises",
          "avantages": "Points forts"
        }}
      ],
      "best_savings": {{
        "assureur_recommande": "Nom de l'assureur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "garanties_supplementaires": "Garanties en plus",
        "conseil_franchise": "Augmenter franchise pour r√©duire prime"
      }}
    }}

    Compare avec les tarifs d'assurance auto actuels. Attention au niveau de garanties √©quivalent.{offers_context}"""

        elif invoice_type == 'assurance_habitation':
            return f"""Tu es expert en factures d'assurance habitation fran√ßaises. Extrais selon ce sch√©ma JSON strict:

    {{
      "client_info": {{
        "nom": "Nom complet du client",
        "adresse_assuree": "Adresse du logement assur√©",
        "numero_contrat": "N¬∞ contrat ou police",
        "statut": "Propri√©taire|Locataire|PNO"
      }},
      "current_offer": {{
        "assureur": "Nom de la compagnie d'assurance",
        "type_contrat": "MRH|Locataire|PNO|√âtudiant",
        "logement": {{
          "type": "Appartement|Maison",
          "surface": "Surface en m¬≤",
          "nombre_pieces": "Nombre de pi√®ces principales",
          "annee_construction": "Si indiqu√©e",
          "residence": "Principale|Secondaire"
        }},
        "prime_annuelle": "Prime annuelle TTC ‚Ç¨",
        "mensualite": "Si paiement mensuel ‚Ç¨/mois",
        "capital_mobilier": "Capital mobilier assur√© ‚Ç¨",
        "franchises": {{
          "generale": "Franchise g√©n√©rale ‚Ç¨",
          "catastrophe_naturelle": "Franchise cat nat ‚Ç¨",
          "degat_eaux": "Franchise d√©g√¢t des eaux ‚Ç¨"
        }},
        "garanties": {{
          "responsabilite_civile": "Montants couverts",
          "incendie_explosion": "Oui - plafonds",
          "degat_eaux": "Oui - conditions",
          "vol_vandalisme": "Oui/Non - conditions",
          "bris_glace": "Oui/Non",
          "catastrophes_naturelles": "Oui",
          "tempete": "Oui",
          "assistance": "Type assistance incluse",
          "protection_juridique": "Oui/Non - plafond"
        }},
        "options": "Piscine, d√©pendances, objets de valeur",
        "date_echeance": "Date √©ch√©ance annuelle"
      }},
      "sinistralite": {{
        "nombre_sinistres": "Sur les 3 derni√®res ann√©es",
        "nature_sinistres": "Types de sinistres d√©clar√©s"
      }},
      "alternatives": [
        {{
          "assureur": "Nom assureur",
          "formule": "Type de formule",
          "prime_annuelle": "Prime annuelle TTC",
          "capital_mobilier": "Capital mobilier",
          "avantages": "Points forts"
        }}
      ],
      "best_savings": {{
        "assureur_recommande": "Nom de l'assureur recommand√©",
        "economie_annuelle": "√âconomie annuelle en euros",
        "garanties_supplementaires": "Garanties am√©lior√©es",
        "conseil": "Ajuster capital mobilier et franchises"
      }}
    }}

    Compare avec les tarifs MRH actuels. V√©rifie l'√©quivalence des garanties et capitaux.{offers_context}"""

        else:
            # Fallback pour type inconnu
            return f"""Analyse ce document de type {invoice_type}. Extrais le maximum d'informations structur√©es:

    {{
      "client_info": {{
        "nom": "Nom du client",
        "adresse": "Adresse si pr√©sente",
        "numero_client": "Identifiant client"
      }},
      "current_offer": {{
        "fournisseur": "Nom du fournisseur/prestataire",
        "service": "Description du service",
        "montant_periode": "Montant pour la p√©riode",
        "montant_annuel": "Montant annuel estim√©",
        "details": "Autres informations pertinentes"
      }},
      "alternatives": [
        "Pas d'alternatives identifi√©es pour ce type de service"
      ],
      "best_savings": {{
        "message": "Analyse manuelle recommand√©e pour ce type de document"
      }}
    }}

    Extrais toutes les informations disponibles du document.{offers_context}"""

    def _detect_issues(self, structured_data: Dict, invoice_type: str) -> List[str]:
        """D√©tecte les pi√®ges et probl√®mes selon les instructions utilisateur"""

        issues = []
        current_offer = structured_data.get('current_offer', {})

        # Instructions de l'utilisateur pour d√©tecter les pi√®ges
        if invoice_type == 'electricite':
            # V√©rifier la puissance souscrite
            puissance = current_offer.get('puissance_souscrite', '')
            if puissance:
                try:
                    kva = float(re.search(r'(\d+)', str(puissance)).group(1))
                    if kva > 6:
                        issues.append(f"Puissance souscrite √©lev√©e ({kva} kVA) - v√©rifier si n√©cessaire")
                except:
                    pass

            # V√©rifier option tarifaire
            if 'HP-HC' in str(current_offer.get('option_tarifaire', '')):
                issues.append("Option Heures Pleines/Creuses - rentable seulement si >30% consommation en HC")

            # Prix √©lev√©
            prix_kwh = self._extract_price_value(current_offer.get('prix_kwh', '0'))
            if prix_kwh > 0.25:
                issues.append(f"Prix du kWh √©lev√© ({prix_kwh}‚Ç¨) - potentiel d'√©conomies important")

        elif invoice_type in ['internet', 'internet_mobile']:
            # Engagement
            engagement = current_offer.get('engagement', '')
            if engagement and '2026' in str(engagement):
                issues.append("Engagement longue dur√©e limitant la flexibilit√©")

            # Services non utilis√©s
            services = current_offer.get('services_inclus', {})
            if services.get('tv') and 'premium' in str(services.get('tv', '')).lower():
                issues.append("Services TV premium inclus - v√©rifier l'utilisation r√©elle")

            # Prix apr√®s promotion
            prix = current_offer.get('prix_mensuel', '')
            if 'promo' in str(prix).lower() or 'premi√®re ann√©e' in str(prix).lower():
                issues.append("Tarif promotionnel temporaire - pr√©voir augmentation")

        # Limite √† 4 issues comme demand√©
        return issues[:4]

    def _extract_price_value(self, text: str) -> float:
        """Extrait une valeur de prix"""
        try:
            cleaned = re.sub(r'[^\d,.]', '', str(text))
            cleaned = cleaned.replace(',', '.')
            return float(cleaned)
        except:
            return 0.0

    def _get_methodology(self, invoice_type: str) -> str:
        """Retourne la m√©thodologie adapt√©e"""
        methodologies = {
            'electricite': "Comparaison bas√©e sur les tarifs r√©glement√©s CRE et offres de march√© janvier 2025",
            'gaz': "Analyse selon les tarifs de r√©f√©rence gaz et offres concurrentes 2025",
            'internet_mobile': "Comparaison des offres convergentes triple/quadruple play du march√© fran√ßais",
            'assurance_auto': "Analyse bas√©e sur les tarifs moyens du march√© assurance auto 2025"
        }
        return methodologies.get(invoice_type, "Analyse comparative du march√© fran√ßais actuel")

    def _get_fallback_structure(self, invoice_type: str) -> Dict:
        """Structure de fallback en cas d'erreur"""
        return {
            'type_facture': invoice_type,
            'client_info': {'nom': '√Ä extraire'},
            'current_offer': {'fournisseur': '√Ä identifier'},
            'alternatives': [],
            'detected_issues': ['Analyse manuelle requise'],
            'best_savings': {'economie_annuelle': '√Ä calculer'}
        }

    def calculate_savings(self, structured_data: Dict) -> Optional[float]:
        """Calcul des √©conomies pour compatibilit√©"""
        best_savings = structured_data.get('best_savings', {})
        economie = best_savings.get('economie_annuelle', '')

        if economie and isinstance(economie, str):
            try:
                return float(re.search(r'(\d+[.]?\d*)', economie).group(1))
            except:
                pass

        return None