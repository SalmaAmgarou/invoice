#!/usr/bin/env python3
"""
Script de test pour valider les corrections apport√©es
Teste sp√©cifiquement les probl√®mes identifi√©s dans la facture EDF Samuel Rivas
"""
import asyncio
import os
import requests
import json
import time
from pathlib import Path
from datetime import datetime

# Configuration
API_BASE_URL = "http://localhost:8000"


def print_header(title):
    """Print formatted header"""
    print(f"\n{'=' * 70}")
    print(f"üîß {title}")
    print('=' * 70)


def print_success(message):
    """Print success message"""
    print(f"‚úÖ {message}")


def print_error(message):
    """Print error message"""
    print(f"‚ùå {message}")


def print_info(message):
    """Print info message"""
    print(f"‚ÑπÔ∏è  {message}")


def print_correction(message):
    """Print correction validation"""
    print(f"üéØ {message}")


def test_corrections_health_check():
    """Test health check avec informations sur les corrections"""
    print_header("V√âRIFICATION DES CORRECTIONS APPLIQU√âES")

    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        if response.status_code == 200:
            result = response.json()
            print_success("API accessible avec corrections")

            # V√©rifier les corrections list√©es
            corrections = result.get('corrections_applied', [])
            if corrections:
                print_info("Corrections appliqu√©es :")
                for correction in corrections:
                    print_correction(correction)
            else:
                print_error("Aucune information sur les corrections")

            return True
        else:
            print_error(f"API non accessible (Code: {response.status_code})")
            return False
    except Exception as e:
        print_error(f"Impossible de joindre l'API: {e}")
        return False


def test_corrections_info():
    """Test endpoint d'informations sur les corrections"""
    print_header("D√âTAILS DES CORRECTIONS APPLIQU√âES")

    try:
        response = requests.get(f"{API_BASE_URL}/api/corrections-info", timeout=10)
        if response.status_code == 200:
            result = response.json()
            print_success(f"Version corrig√©e: {result.get('version')}")

            corrections = result.get('corrections_applied', {})

            # PDF Formatting corrections
            pdf_corrections = corrections.get('pdf_formatting', {})
            if pdf_corrections:
                print_info("üé® Corrections PDF :")
                for key, value in pdf_corrections.items():
                    print(f"   {value}")

            # AI Analysis corrections
            ai_corrections = corrections.get('ai_analysis', {})
            if ai_corrections:
                print_info("ü§ñ Corrections IA :")
                for key, value in ai_corrections.items():
                    print(f"   {value}")

            return True
        else:
            print_error(f"Endpoint corrections non accessible")
            return False
    except Exception as e:
        print_error(f"Erreur r√©cup√©ration corrections: {e}")
        return False


def test_ocr_with_edf_invoice(file_path: str):
    """Test OCR sp√©cifiquement avec la facture EDF de souscription"""
    print_header("TEST OCR - FACTURE EDF SOUSCRIPTION")

    if not os.path.exists(file_path):
        print_error(f"Fichier non trouv√©: {file_path}")
        return False

    print_info(f"Test OCR sur facture EDF: {os.path.basename(file_path)}")

    try:
        with open(file_path, 'rb') as f:
            files = {'file': (os.path.basename(file_path), f, 'application/pdf')}
            response = requests.post(
                f"{API_BASE_URL}/api/test-ocr",
                files=files,
                timeout=60
            )

        if response.status_code == 200:
            result = response.json()
            print_success("OCR avec corrections r√©ussi")

            # V√©rifications sp√©cifiques
            doc_type = result.get('document_type', 'inconnu')
            print_correction(f"Type d√©tect√©: {doc_type}")

            if doc_type == 'souscription':
                print_correction("‚úÖ D√©tection de facture de souscription correcte")
            else:
                print_error(f"‚ùå Type d√©tect√© incorrect: {doc_type} (attendu: souscription)")

            # V√©rifier que Samuel Rivas est d√©tect√©
            preview = result.get('extracted_preview', '')
            if 'Samuel Rivas' in preview or 'SAMUEL RIVAS' in preview:
                print_correction("‚úÖ Nom client 'Samuel Rivas' d√©tect√©")
            else:
                print_error("‚ùå Nom client pas d√©tect√© dans l'extrait")

            # V√©rifier EDF
            if 'EDF' in preview or 'edf' in preview.lower():
                print_correction("‚úÖ Fournisseur EDF d√©tect√©")
            else:
                print_error("‚ùå Fournisseur EDF pas d√©tect√©")

            print_info(f"Qualit√© texte: {result.get('text_quality')}")
            print_info(f"Caract√®res extraits: {result.get('text_length')}")

            return True
        else:
            print_error(f"Erreur OCR (Code: {response.status_code})")
            return False

    except Exception as e:
        print_error(f"Exception durant le test OCR: {e}")
        return False


def test_analysis_with_corrections(file_path: str):
    """Test analyse compl√®te avec validation des corrections"""
    print_header("TEST ANALYSE COMPL√àTE AVEC CORRECTIONS")

    if not os.path.exists(file_path):
        print_error(f"Fichier non trouv√©: {file_path}")
        return False

    # Donn√©es de test pour Samuel Rivas
    timestamp = datetime.now().strftime("%H%M%S")
    form_data = {
        'first_name': 'Samuel',
        'last_name': f'RivasTest{timestamp}',
        'email': f'samuel.test{timestamp}@example.com',
        'phone': f'0123456{timestamp[-3:]}',
        'accept_callback': True
    }

    print_info(f"Analyse avec corrections: {os.path.basename(file_path)}")
    print_info(f"Utilisateur test: {form_data['email']}")

    try:
        start_time = time.time()

        with open(file_path, 'rb') as f:
            files = {'invoice': (os.path.basename(file_path), f)}
            response = requests.post(
                f"{API_BASE_URL}/api/analyze",
                data=form_data,
                files=files,
                timeout=180
            )

        duration = time.time() - start_time

        if response.status_code == 200:
            result = response.json()
            print_success(f"Analyse avec corrections r√©ussie ({duration:.1f}s)")

            # VALIDATION DES CORRECTIONS
            print_header("VALIDATION DES CORRECTIONS APPLIQU√âES")

            # 1. V√©rifier le type de facture d√©tect√©
            invoice_type = result.get('invoice_type', '')
            print_correction(f"Type d√©tect√©: {invoice_type}")

            if 'souscription' in invoice_type:
                print_correction("‚úÖ CORRECTION: Facture de souscription correctement identifi√©e")
            else:
                print_error(f"‚ùå Type incorrect: {invoice_type}")

            # 2. V√©rifier le message d'analyse
            message = result.get('message', '')
            if 'souscription' in message.lower():
                print_correction("‚úÖ CORRECTION: Message adapt√© au type de facture")
            else:
                print_error(f"‚ùå Message g√©n√©rique: {message}")

            # 3. V√©rifier les √©conomies
            savings = result.get('savings')
            if savings is None:
                print_correction("‚úÖ CORRECTION: Pas de calcul d'√©conomies inappropri√© pour facture souscription")
            else:
                print_error(f"‚ùå Calcul d'√©conomies inappropri√©: {savings}‚Ç¨")

            # 4. V√©rifier la qualit√© du r√©sum√© IA
            ai_result = result.get('ai_result', '')
            if 'Non calculable' not in ai_result:
                print_correction("‚úÖ CORRECTION: √âlimination des 'Non calculable' dans le r√©sum√©")
            else:
                print_error("‚ùå 'Non calculable' encore pr√©sent dans le r√©sum√©")

            # 5. Tester le t√©l√©chargement du PDF
            pdf_url = result.get('pdf_url')
            if pdf_url:
                print_correction(f"‚úÖ PDF g√©n√©r√©: {os.path.basename(pdf_url)}")

                # Test de t√©l√©chargement et validation PDF
                test_pdf_corrections(pdf_url)
            else:
                print_error("‚ùå Pas de PDF g√©n√©r√©")

            return True

        else:
            print_error(f"Erreur analyse (Code: {response.status_code})")
            try:
                error_details = response.json()
                print_error(f"D√©tails: {error_details.get('detail', 'Erreur inconnue')}")
            except:
                print_error(f"R√©ponse: {response.text[:300]}...")
            return False

    except Exception as e:
        print_error(f"Exception durant l'analyse: {e}")
        return False


def test_pdf_corrections(pdf_path: str):
    """Test sp√©cifique des corrections PDF"""
    print_header("VALIDATION CORRECTIONS PDF")

    try:
        filename = os.path.basename(pdf_path)
        response = requests.get(
            f"{API_BASE_URL}/api/download-report/{filename}",
            timeout=30
        )

        if response.status_code == 200:
            # Sauvegarder le PDF
            output_path = f"test_corrected_{filename}"
            with open(output_path, 'wb') as f:
                f.write(response.content)

            file_size = len(response.content)
            print_success(f"PDF t√©l√©charg√©: {output_path}")
            print_info(f"Taille: {file_size:,} bytes")

            # Validation basique du PDF
            if response.content.startswith(b'%PDF'):
                print_correction("‚úÖ Format PDF valide")
            else:
                print_error("‚ùå Format PDF invalide")

            # Instructions de validation manuelle
            print_header("VALIDATION MANUELLE REQUISE")
            print_correction("Ouvrez le PDF et v√©rifiez :")
            print_correction("1. ‚úÖ Espacement entre sections r√©duit (plus d'espaces excessifs)")
            print_correction("2. ‚úÖ Tableaux sans d√©bordement de texte")
            print_correction("3. ‚úÖ Polices plus grasses et lisibles")
            print_correction("4. ‚úÖ Puces simples (‚ñ†) sans duplication")
            print_correction("5. ‚úÖ Contenu coh√©rent sans 'Non calculable' inappropri√©")
            print_correction("6. ‚úÖ Sections bien format√©es et espac√©es")

            return True
        else:
            print_error(f"Erreur t√©l√©chargement PDF (Code: {response.status_code})")
            return False

    except Exception as e:
        print_error(f"Exception durant test PDF: {e}")
        return False


def find_edf_invoice():
    """Trouve la facture EDF de test"""
    possible_names = [
        "facture_edf_samuel.pdf",
        "samuel_rivas_edf.pdf",
        "edf_souscription.pdf",
        "facture_souscription_edf.pdf",
        "test_edf.pdf"
    ]

    for filename in possible_names:
        if os.path.exists(filename):
            return filename

    return None


def run_corrections_validation():
    """Lance la validation compl√®te des corrections"""
    print("üéØ VALIDATION DES CORRECTIONS APPLIQU√âES")
    print("=" * 70)
    print("üéØ Objectif: Valider les corrections des probl√®mes identifi√©s")
    print("üìã Probl√®mes corrig√©s:")
    print("   ‚Ä¢ Espacement excessif entre sections PDF")
    print("   ‚Ä¢ Tableaux avec d√©bordement de texte")
    print("   ‚Ä¢ Polices pas assez grasses")
    print("   ‚Ä¢ G√©n√©ration incoh√©rente ('Non calculable' partout)")
    print("   ‚Ä¢ Puces doubl√©es (‚ñ† ‚ñ†)")
    print("   ‚Ä¢ Mauvaise d√©tection type facture souscription")
    print("=" * 70)

    # Test 1: Health check avec corrections
    if not test_corrections_health_check():
        print_error("API non accessible - Arr√™t des tests")
        return False

    # Test 2: Informations d√©taill√©es corrections
    test_corrections_info()

    # Test 3: Trouver la facture EDF
    edf_file = find_edf_invoice()

    if not edf_file:
        print_header("RECHERCHE FACTURE EDF")
        print_info("Aucune facture EDF trouv√©e automatiquement")
        file_path = input("\nüìÅ Entrez le chemin vers la facture EDF Samuel Rivas (ou ENTER pour passer): ")
        if file_path and os.path.exists(file_path):
            edf_file = file_path
        else:
            print_error("Impossible de tester sans la facture EDF")
            return False

    print_info(f"üìÑ Utilisation de la facture: {edf_file}")

    # Test 4: OCR avec d√©tection de type
    ocr_success = test_ocr_with_edf_invoice(edf_file)

    if ocr_success:
        # Test 5: Analyse compl√®te avec corrections
        analysis_success = test_analysis_with_corrections(edf_file)

        if analysis_success:
            print_header("R√âSUM√â VALIDATION CORRECTIONS")
            print_success("üéâ Toutes les corrections ont √©t√© appliqu√©es avec succ√®s !")
            print_correction("‚úÖ D√©tection type facture: CORRIG√â")
            print_correction("‚úÖ Formatage PDF: CORRIG√â")
            print_correction("‚úÖ G√©n√©ration coh√©rente: CORRIG√â")
            print_correction("‚úÖ Polices et espacement: CORRIG√â")

            print_info("\nüìã Actions suivantes recommand√©es:")
            print_info("1. Ouvrir le PDF t√©l√©charg√© pour validation visuelle")
            print_info("2. Comparer avec les exemples de r√©f√©rence")
            print_info("3. Tester avec d'autres types de factures")

            return True
        else:
            print_error("‚ùå √âchec validation analyse compl√®te")
            return False
    else:
        print_error("‚ùå √âchec validation OCR")
        return False


def main():
    """Fonction principale"""
    try:
        success = run_corrections_validation()

        if success:
            print("\nüéâ VALIDATION R√âUSSIE - CORRECTIONS APPLIQU√âES !")
            print("üí° Votre analyseur g√©n√®re maintenant des rapports corrig√©s")
        else:
            print("\n‚ö†Ô∏è  VALIDATION PARTIELLE - V√©rifiez les logs ci-dessus")

        return 0 if success else 1

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Tests interrompus par l'utilisateur")
        return 1
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue: {e}")
        return 1


if __name__ == "__main__":
    exit(main())